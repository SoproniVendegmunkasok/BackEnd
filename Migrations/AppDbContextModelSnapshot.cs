// <auto-generated />
using System;
using GuestHibajelentesEvvegi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GuestHibajelentesEvvegi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.Error", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("assigned_to")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("machine_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("resolved_at")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<string>("submitted_by")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("assigned_to");

                    b.HasIndex("machine_id");

                    b.HasIndex("submitted_by");

                    b.ToTable("Errors");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            assigned_to = "-2",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2472),
                            description = "Error description 1",
                            machine_id = -1,
                            resolved_at = new DateTime(2025, 3, 29, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2473),
                            status = 0,
                            submitted_by = "-1"
                        },
                        new
                        {
                            Id = -2,
                            assigned_to = "-3",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2478),
                            description = "Error description 2",
                            machine_id = -2,
                            resolved_at = new DateTime(2025, 3, 30, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2480),
                            status = 1,
                            submitted_by = "-2"
                        },
                        new
                        {
                            Id = -3,
                            assigned_to = "-4",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2482),
                            description = "Error description 3",
                            machine_id = -3,
                            resolved_at = new DateTime(2025, 3, 31, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2484),
                            status = 2,
                            submitted_by = "-3"
                        },
                        new
                        {
                            Id = -4,
                            assigned_to = "-1",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2486),
                            description = "Error description 4",
                            machine_id = -4,
                            resolved_at = new DateTime(2025, 4, 1, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2487),
                            status = 0,
                            submitted_by = "-4"
                        });
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("error_id")
                        .HasColumnType("int");

                    b.Property<string>("user_id")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("error_id");

                    b.HasIndex("user_id");

                    b.ToTable("Error_logs");
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.ErrorTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("assigned_to")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("error_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("resolved_at")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("assigned_to");

                    b.HasIndex("error_id");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            assigned_to = "-2",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2516),
                            description = "Task 1 for Error 1",
                            error_id = -1,
                            resolved_at = new DateTime(2025, 3, 28, 21, 39, 39, 99, DateTimeKind.Local).AddTicks(2518)
                        },
                        new
                        {
                            Id = -2,
                            assigned_to = "-2",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2521),
                            description = "Task 2 for Error 1",
                            error_id = -1,
                            resolved_at = new DateTime(2025, 3, 28, 22, 39, 39, 99, DateTimeKind.Local).AddTicks(2522)
                        },
                        new
                        {
                            Id = -3,
                            assigned_to = "-2",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2524),
                            description = "Task 3 for Error 1",
                            error_id = -1,
                            resolved_at = new DateTime(2025, 3, 28, 23, 39, 39, 99, DateTimeKind.Local).AddTicks(2525)
                        },
                        new
                        {
                            Id = -4,
                            assigned_to = "-3",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2527),
                            description = "Task 1 for Error 2",
                            error_id = -2,
                            resolved_at = new DateTime(2025, 3, 28, 21, 39, 39, 99, DateTimeKind.Local).AddTicks(2528)
                        },
                        new
                        {
                            Id = -5,
                            assigned_to = "-3",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2530),
                            description = "Task 2 for Error 2",
                            error_id = -2,
                            resolved_at = new DateTime(2025, 3, 28, 22, 39, 39, 99, DateTimeKind.Local).AddTicks(2531)
                        },
                        new
                        {
                            Id = -6,
                            assigned_to = "-3",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2533),
                            description = "Task 3 for Error 2",
                            error_id = -2,
                            resolved_at = new DateTime(2025, 3, 28, 23, 39, 39, 99, DateTimeKind.Local).AddTicks(2534)
                        },
                        new
                        {
                            Id = -7,
                            assigned_to = "-4",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2536),
                            description = "Task 1 for Error 3",
                            error_id = -3,
                            resolved_at = new DateTime(2025, 3, 28, 21, 39, 39, 99, DateTimeKind.Local).AddTicks(2537)
                        },
                        new
                        {
                            Id = -8,
                            assigned_to = "-4",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2539),
                            description = "Task 2 for Error 3",
                            error_id = -3,
                            resolved_at = new DateTime(2025, 3, 28, 22, 39, 39, 99, DateTimeKind.Local).AddTicks(2540)
                        },
                        new
                        {
                            Id = -9,
                            assigned_to = "-4",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2542),
                            description = "Task 3 for Error 3",
                            error_id = -3,
                            resolved_at = new DateTime(2025, 3, 28, 23, 39, 39, 99, DateTimeKind.Local).AddTicks(2543)
                        },
                        new
                        {
                            Id = -10,
                            assigned_to = "-1",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2545),
                            description = "Task 1 for Error 4",
                            error_id = -4,
                            resolved_at = new DateTime(2025, 3, 28, 21, 39, 39, 99, DateTimeKind.Local).AddTicks(2546)
                        },
                        new
                        {
                            Id = -11,
                            assigned_to = "-1",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2548),
                            description = "Task 2 for Error 4",
                            error_id = -4,
                            resolved_at = new DateTime(2025, 3, 28, 22, 39, 39, 99, DateTimeKind.Local).AddTicks(2549)
                        },
                        new
                        {
                            Id = -12,
                            assigned_to = "-1",
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2551),
                            description = "Task 3 for Error 4",
                            error_id = -4,
                            resolved_at = new DateTime(2025, 3, 28, 23, 39, 39, 99, DateTimeKind.Local).AddTicks(2552)
                        });
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.Machine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("hall")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Machines");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2370),
                            hall = "H1",
                            name = "Machine1",
                            status = 0
                        },
                        new
                        {
                            Id = -2,
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2428),
                            hall = "H2",
                            name = "Machine2",
                            status = 1
                        },
                        new
                        {
                            Id = -3,
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2430),
                            hall = "H3",
                            name = "Machine3",
                            status = 0
                        },
                        new
                        {
                            Id = -4,
                            created_at = new DateTime(2025, 3, 28, 20, 39, 39, 99, DateTimeKind.Local).AddTicks(2432),
                            hall = "H4",
                            name = "Machine4",
                            status = 1
                        });
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "-1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "XYZ123",
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAEAACcQAAAAE1234567ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ABC123",
                            TwoFactorEnabled = false,
                            UserName = "user1"
                        },
                        new
                        {
                            Id = "-2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "UVW456",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAEAACcQAAAAE2345678ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DEF456",
                            TwoFactorEnabled = false,
                            UserName = "user2"
                        },
                        new
                        {
                            Id = "-3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "RST789",
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAEAACcQAAAAE3456789ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GHI789",
                            TwoFactorEnabled = false,
                            UserName = "user3"
                        },
                        new
                        {
                            Id = "-4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "OPQ012",
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAEAACcQAAAAE4567890ABCDEFGHIJKLMNOPQRSTUVWXYZ",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JKL012",
                            TwoFactorEnabled = false,
                            UserName = "user4"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.Error", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.User", "assigned_worker")
                        .WithMany()
                        .HasForeignKey("assigned_to")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestHibajelentesEvvegi.Models.Machine", "machine")
                        .WithMany()
                        .HasForeignKey("machine_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestHibajelentesEvvegi.Models.User", "submitting_worker")
                        .WithMany()
                        .HasForeignKey("submitted_by")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assigned_worker");

                    b.Navigation("machine");

                    b.Navigation("submitting_worker");
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.ErrorLog", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.Error", "base_error")
                        .WithMany()
                        .HasForeignKey("error_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestHibajelentesEvvegi.Models.User", "notified_worker")
                        .WithMany()
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("base_error");

                    b.Navigation("notified_worker");
                });

            modelBuilder.Entity("GuestHibajelentesEvvegi.Models.ErrorTask", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.User", "assigned_worker")
                        .WithMany()
                        .HasForeignKey("assigned_to")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestHibajelentesEvvegi.Models.Error", "associated_error")
                        .WithMany()
                        .HasForeignKey("error_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("assigned_worker");

                    b.Navigation("associated_error");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GuestHibajelentesEvvegi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("GuestHibajelentesEvvegi.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
